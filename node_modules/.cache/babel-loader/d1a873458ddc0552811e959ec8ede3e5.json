{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AstroWorkSvg = _resolveComponent(\"AstroWorkSvg\");\n\n  return _openBlock(), _createBlock(_component_AstroWorkSvg);\n}","map":{"version":3,"mappings":";;;;uBACCA,aAAeC,uBAAf","names":["_createBlock","_component_AstroWorkSvg"],"sourceRoot":"","sources":["/home/runner/work/portfolio/portfolio/src/components/characters/work/AstroWork.vue"],"sourcesContent":["<template>\n\t<AstroWorkSvg/>\n</template>\n\n<script>\nimport AstroWorkSvg from './AstroWorkSvg.vue';\nimport {basicLoop, loopBounce, loopSineInOut, loopBackInOut} from '@/constants'\nimport { setAnimation } from '../switchAnimation';\nimport { isProxy, toRaw } from 'vue';\n\n\nexport default ({\n\tname: \"AstroWork\",\n\tcomponents: {AstroWorkSvg},\n\tmixins: [setAnimation],\n\tprops: {\n\t\tisPlaying: Boolean,\n\t},\n\tdata() {\n\t\treturn { \n\t\t\twindowWidth: window.innerWidth,\n\t\t\twindowHeight: window.innerHeight,\n\t\t\tastroWidth: null,\n\t\t\tastroHeight: null,\n\t\t}\n\t},\n\tmethods: {\n\t\tinit() {\n\t\t\tconst astro = document.querySelector('#astroWork');\n            const stars = document.querySelectorAll('#astroWork .star');\n\t\t\tconst hand = document.querySelector('#astroWork #hand');\n\t\t\tconst head = document.querySelector('#astroWork #head');\n\t\t\tconst light = document.querySelector('#astroWork #light');\n\t\t\tthis.astroWidth = astro.getBoundingClientRect().width;\n\t\t\tthis.astroHeight= astro.getBoundingClientRect().height;\n\n\t\t\tlet timeline;\n\t\t\tif (isProxy(this.timeline)){\n\t\t\t\ttimeline = toRaw(this.timeline);\n\t\t\t}\n\t\t\t\t\n\t\t\t/* stars */\t\n            stars.forEach((star) => {\n\t\t\t\ttimeline\n\t\t\t\t.fromTo(star,  {rotate: -360 }, {\n\t\t\t\t\trotate: 360,\n                    transformOrigin: \"50%, 50%\",\n\t\t\t\t\tduration: 5,\n\t\t\t\t\t...loopSineInOut\n\t\t\t\t},0)\n                .fromTo(star, { scale: 1.2 }, {\n                    scale: .6,\n                    duration: 3,\n\t\t\t\t\t...basicLoop\n                },0)\n      \n\t\t\t});\n\n\t\t\ttimeline\n\t\t\t/* hand  */\t\n\t\t\t.fromTo(hand, {rotateZ: 0, y: 2}, {\n\t\t\t\trotateZ: 12,\n\t\t\t\ty: -2,\n\t\t\t\tduration: \"random(1, 1.8)\",\n\t\t\t\ttransformOrigin: '50% 50%',\n\t\t\t\t...loopSineInOut,\n\t\t\t\trepeatRefresh: true\n\t\t\t},0)\n\t\t\t/* head  */\t\n\t\t\t.fromTo(head, {rotateZ: 0},{\n\t\t\t\trotateZ: 10,\n\t\t\t\tduration: 3,\n\t\t\t\ttransformOrigin: '30% 50%',\n\t\t\t\t...loopSineInOut\n\t\t\t},0)\n\t\t\t/* light  */\t\n\t\t\t.fromTo(light, {opacity: 0.1}, {\n\t\t\t\topacity: \"random(0.2, 0.4)\",\n\t\t\t\tduration: \"random(3, 6)\",\n\t\t\t\t...loopBounce,\n\t\t\t\trepeatRefresh: true\n\t\t\t},0)\n\n\t\t\tconst astroMove = (windowWidth, elementWidth, windowHeight, elementHeight) => {\n\t\t\t\ttimeline\n\t\t\t\t\t.fromTo(astro, {x: 30, y: 45, rotate: -0}, {\n\t\t\t\t\tx: `random(${-windowWidth + elementWidth}, 50)`,\n\t\t\t\t\ty: `random(${-windowHeight + elementHeight}, 60)`,\n\t\t\t\t\trotate: \"random([-360, -180, -30, 30, 180, 360])\",\n\t\t\t\t\tduration: 13,\n\t\t\t\t\t...loopBackInOut,\n\t\t\t\t\trepeatRefresh: true\n\t\t\t\t}, 0)\n\t\t\t}\n\t\t\tastroMove(this.windowWidth, this.astroWidth, this.windowHeight, this.astroHeight)\n\t\t}\n\t}\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}