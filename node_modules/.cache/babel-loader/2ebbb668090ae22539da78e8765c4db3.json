{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FlyUnicornSvg = _resolveComponent(\"FlyUnicornSvg\");\n\n  return _openBlock(), _createBlock(_component_FlyUnicornSvg, {\n    class: \"unicorn\",\n    onChange: $options.openGame\n  }, null, 8, [\"onChange\"]);\n}","map":{"version":3,"mappings":";;;;uBAEIA,aAAoDC,wBAApD,EAAoD;IAArCC,KAAK,EAAC,SAA+B;IAApBC,QAAM,EAAEC;EAAY,CAApD","names":["_createBlock","_component_FlyUnicornSvg","class","onChange","$options"],"sourceRoot":"","sources":["/home/runner/work/portfolio/portfolio/src/components/characters/unicorn/FlyUnicorn.vue"],"sourcesContent":["\n<template>\n    <FlyUnicornSvg class=\"unicorn\" @change=\"openGame\" />\n</template>\n\n<script>\nimport FlyUnicornSvg from './FlyUnicornSvg.vue';\nimport gsap from 'gsap';\nimport {loopSineInOut} from '@/constants';\n\nexport default ({\n    name: 'FlyUnicorn',\n    props: ['game'],\n    components: { FlyUnicornSvg},\n    data() {\n        return {\n            unicorn: null,\n        }\n    },\n    methods: {\n      unicornAnimation() {\n        const uni = document.querySelectorAll('#unicorn');\n        const uniFringe = document.querySelectorAll('#unicorn .hair1');\n        const uniEye = document.querySelector('#unicorn .eye');\n        const uniHair = document.querySelectorAll('#unicorn .hair2');\n        const umbrella = document.querySelector('#unicorn .umbrella');\n        const umbrellaStick = document.querySelectorAll('#unicorn .umbrella-stick');\n        const hand = document.querySelectorAll('#unicorn .hand');\n        const timeline = gsap.timeline();\n  \n        uniFringe.forEach(hair => {\n          timeline\n            .fromTo(hair, {rotateZ: 0}, {\n              rotateZ: 5,\n              duration: 1.3,\n              transformOrigin: \"100% 50%\",\n              ...loopSineInOut,\n            },0 )\n        })\n\n        uniHair.forEach(hair => {\n          timeline\n            .fromTo(hair, {y: 0, x: -1}, {\n              y: 1,\n              x: 1,\n              duration: 1.3,\n              transformOrigin: \"50% 50%\",\n              ...loopSineInOut\n            },0 )\n        })\n\n        timeline\n       /* unicorn */\t\n        .fromTo(uni, { rotateZ: 1}, {\n          rotateZ: \"random(2, 6)\",\n          duration: \"random(1, 2)\",\n          ...loopSineInOut,\n          repeatRefresh: true\n        },0)\n        /* umbrella */\t\n        .fromTo(umbrella, {rotateZ: -2, x: 1}, {\n              rotateZ: 2,\n              x: 1,\n              duration: 1,\n              transformOrigin: \"50% 50%\",\n              ...loopSineInOut\n            },0 )\n\n        /* umbrella stick */\t\n        .fromTo(umbrellaStick, {rotateZ: -2, x: -2.5}, {\n            rotateZ: 2,\n            x: -2.5,\n            duration: 1,\n            transformOrigin: \"50% 50%\",\n            ...loopSineInOut\n        },0 )\n\n        /* hand  */\t\n        .fromTo(hand, {rotateZ: 2}, {\n            rotateZ: -2,\n            duration: 1,\n            transformOrigin: \"100% 100%\",\n            ...loopSineInOut\n          },0 )\n\n        /* eye  */\t\n        .fromTo(uniEye, {scaleY: 1},{\n          scaleY: 1,\n          transformOrigin: '50% 50%',\n          repeat: -1,\n          duration: 2,\n          repeatDelay: .2,\n        },0)\n\n        .fromTo(uniEye, {scaleY: .1},{\n          scaleY: 1,\n          transformOrigin: '50% 50%',\n          repeat: -1,\n          delay: 2,\n          duration: .2,\n          repeatDelay: 2,\n        },1)\n      },\n\n      moveUnicorn(element) {\n        let pxPerSecond = 50;\n        let newPos = {\n          x:gsap.utils.random(-window.innerWidth, window.innerWidth * 2),\n          y:gsap.utils.random(-window.innerHeight, window.innerHeight * 2)\n        }\n\n        let curPos = {\n          x:gsap.getProperty(element, \"x\"),\n          y:gsap.getProperty(element, \"y\")\n        }\n\n        let deltaX = curPos.x - newPos.x\n        let deltaY = curPos.y - newPos.y\n        let distance = Math.hypot(deltaX, deltaY)\n        let duration = distance / pxPerSecond\n\n        gsap.to(element, {\n          x: newPos.x, \n          y: newPos.y, \n          duration: duration, \n          ease:\"none\",\n          onComplete: this.moveUnicorn, \n          onCompleteParams:[element]\n        }) \n\n        curPos.x > newPos.x ? \n          gsap.to(element,{scaleX: 1, duration: 0}) : \n          gsap.to(element,{scaleX: -1, duration: 0});\n        },\n\n        doubleTapUnicorn(element) {\n          let lastClick = 0;\n          element.addEventListener('touchstart', () => {\n            let date = new Date();\n            let time = date.getTime();\n            \n            const time_between_taps = 200; \n            if (time - lastClick < time_between_taps) {\n              this.openGame();\n            }\n            lastClick = time;\n          }, {passive: true})\n        },\n\n        doubleClickUnicorn(element) {\n          element.addEventListener('dblclick', () => {\n            this.openGame();\n          })\n        },\n\n        openGame() {\n          this.setGame = true\n          this.$emit('openGame')\n        },\n    },\n    \n    mounted() {\n      this.unicorn = document.querySelector('.unicorn');\n      this.unicornAnimation();\n      this.moveUnicorn(this.unicorn);\n      this.doubleTapUnicorn(this.unicorn);\n      this.doubleClickUnicorn(this.unicorn);\n    },\n\n});\n\n</script>\n\n\n<style lang=\"scss\" scoped>\n\n#unicorn {\n  @include size(34vw, auto);\n  @include absolute(30%, null, null, 10%);\n  z-index: 2000;\n  cursor: pointer;\n\n    @media screen and (min-width: $screen-desktop) {\n      @include size(12vw, auto); \n    }\n}\n</style>\n\n"]},"metadata":{},"sourceType":"module"}