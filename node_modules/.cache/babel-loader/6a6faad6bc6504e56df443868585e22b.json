{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AstroTimeSvg = _resolveComponent(\"AstroTimeSvg\");\n\n  return _openBlock(), _createBlock(_component_AstroTimeSvg);\n}","map":{"version":3,"mappings":";;;;uBACEA,aAAgBC,uBAAhB","names":["_createBlock","_component_AstroTimeSvg"],"sourceRoot":"","sources":["/home/runner/work/portfolio/portfolio/src/components/characters/astronaut/AstroTime.vue"],"sourcesContent":["<template>\n  <AstroTimeSvg />\n</template>\n\n<script>\nimport AstroTimeSvg from \"./AstroTimeSvg.vue\";\nimport { gsap } from \"gsap\";\n\nimport { loopBackInOut, loop, loopSineinOut } from \"@/constants\";\nimport { setAnimation } from \"../switchAnimation\";\nimport { isProxy, toRaw } from \"vue\";\n\nexport default {\n  name: \"AstroTime\",\n  components: { AstroTimeSvg },\n  mixins: [setAnimation],\n  props: {\n    isPlaying: Boolean,\n  },\n  data() {\n    return {\n      intervalId: null,\n    };\n  },\n  methods: {\n    init() {\n      const astronaut = document.querySelector(\"#astronaut\");\n      const stars = document.querySelectorAll(\"#astroTime .star\");\n      const dots = document.querySelectorAll(\"#astroTime .dot\");\n      const leftHand = document.querySelector(\"#hand-left\");\n      const rightHand = document.querySelector(\"#hand-right\");\n      const head = document.querySelector(\"#astroHead\");\n\n      let timeline;\n      if (isProxy(this.timeline)) {\n        timeline = toRaw(this.timeline);\n      }\n\n      /* astronaut */\n      timeline.fromTo(\n        astronaut,\n        { y: -45, x: 0 },\n        {\n          y: \"random(-410, 10)\",\n          x: \"random(-50, 50)\",\n          duration: \"random(2, 4)\",\n          ...loopSineinOut,\n          repeatRefresh: true,\n        },\n        0\n      );\n\n      /* head */\n      timeline.fromTo(\n        head,\n        { rotateZ: -5, y: 90 },\n        {\n          rotate: 1,\n          y: 90,\n          repeatDelay: 3,\n          duration: \"random(1, 6)\",\n          transformOrigin: \"50% 50%\",\n          ...loopSineinOut,\n          repeatRefresh: true,\n        },\n        0\n      );\n\n      /* left hand */\n      timeline.fromTo(\n        leftHand,\n        { rotateZ: -3 },\n        {\n          rotate: 4,\n          duration: 2,\n          repeatDelay: 3,\n          ...loopSineinOut,\n          repeatRefresh: true,\n        },\n        0\n      );\n\n      /* right hand */\n      timeline.fromTo(\n        rightHand,\n        { rotateZ: -4 },\n        {\n          rotate: 3,\n          duration: 2,\n          repeatDelay: 3,\n          ...loopSineinOut,\n          repeatRefresh: true,\n        },\n        0\n      );\n\n      /* stars */\n      stars.forEach((star) => {\n        timeline.fromTo(\n          star,\n          { x: 0, y: 0, rotate: 0 },\n          {\n            x: \"random(-1000, 10)\",\n            y: \"random(-1000, 1000)\",\n            rotate: \"random([-360, -180, -30, 30, 180, 360])\",\n            transformOrigin: \"50% 50%\",\n\n            duration: 20,\n            loop,\n            repeatRefresh: true,\n          },\n          0\n        );\n      });\n\n      /* dots */\n      dots.forEach((dot) => {\n        timeline.fromTo(\n          dot,\n          { scale: 0 },\n          {\n            scale: \"random(0.1, 1)\",\n            transformOrigin: \"50% 50%\",\n            duration: \"random(1, 5)\",\n            ...loopBackInOut,\n            repeatRefresh: true,\n            onStart: function () {\n              gsap.to(dot, {\n                x: \"random(-300, 100)\",\n                y: \"random(-1000, 1000)\",\n                duration: 2,\n              });\n            },\n          },\n          0\n        );\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}