{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-7f5d9172\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  ref: \"unicornContainer\",\n  id: \"unicornContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_InfoBubble = _resolveComponent(\"InfoBubble\");\n\n  const _component_FlyUnicornSvg = _resolveComponent(\"FlyUnicornSvg\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_Transition, {\n    name: \"fade\"\n  }, {\n    default: _withCtx(() => [$data.showInfoBubble ? (_openBlock(), _createBlock(_component_InfoBubble, {\n      key: 0\n    })) : _createCommentVNode(\"\", true)]),\n    _: 1\n  }), _createVNode(_component_FlyUnicornSvg, {\n    ref: \"flyUnicornSvg\",\n    onChange: $options.openGame\n  }, null, 8, [\"onChange\"])], 512);\n}","map":{"version":3,"mappings":";;;;;EAEOA,GAAG,EAAC;EAAmBC,EAAE,EAAC;;;;;;;uBAA/BC,oBAKM,KALN,cAKM,CAJJC,aAEaC,WAFb,EAEa;IAFDC,IAAI,EAAC;EAEJ,CAFb,EAAuB;sBACrB,MAAoC,CAAlBC,sCAAlBC,aAAoCC,qBAApC,EAAoC;MAAAC;IAAA,CAApC,kCAAoC,EADf;;EAAA,CAAvB,CAII,EADJN,aAAwDO,wBAAxD,EAAwD;IAAzCV,GAAG,EAAC,eAAqC;IAApBW,QAAM,EAAEC;EAAY,CAAxD,wBACI,CALN","names":["ref","id","_createElementBlock","_createVNode","_Transition","name","$data","_createBlock","_component_InfoBubble","key","_component_FlyUnicornSvg","onChange","$options"],"sourceRoot":"","sources":["/home/runner/work/portfolio/portfolio/src/components/characters/unicorn/FlyUnicorn.vue"],"sourcesContent":["<template>\n  <!-- TO DO: when change component: remove unicornCOntainer and InfoBubble when component change -->\n  <div ref=\"unicornContainer\" id=\"unicornContainer\">\n    <transition name=\"fade\">\n      <InfoBubble v-if=\"showInfoBubble\" />\n    </transition>\n    <FlyUnicornSvg ref=\"flyUnicornSvg\" @change=\"openGame\" />\n  </div>\n</template>\n\n<script>\nimport FlyUnicornSvg from \"./FlyUnicornSvg.vue\";\nimport gsap from \"gsap\";\nimport { loopSineInOut } from \"@/constants\";\nimport InfoBubble from \"@/components/InfoBubble.vue\";\n\nexport default {\n  name: \"FlyUnicorn\",\n  props: [\"game\"],\n  components: { FlyUnicornSvg, InfoBubble },\n  data() {\n    return {\n      unicorn: null,\n      unicornContainer: null,\n      infoBubble: null,\n      showInfoBubble: false,\n    };\n  },\n  methods: {\n    unicornAnimation() {\n      const uni = this.unicorn;\n      const uniFringe = uni.querySelectorAll(\".hair1\");\n      const uniEye = uni.querySelector(\".eye\");\n      const uniHair = uni.querySelectorAll(\".hair2\");\n      const umbrella = uni.querySelector(\".umbrella\");\n      const umbrellaStick = uni.querySelectorAll(\".umbrella-stick\");\n      const hand = uni.querySelectorAll(\".hand\");\n      const timeline = gsap.timeline();\n\n      uniFringe.forEach((hair) => {\n        timeline.fromTo(\n          hair,\n          { rotateZ: 0 },\n          {\n            rotateZ: 5,\n            duration: 1.3,\n            transformOrigin: \"100% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        );\n      });\n\n      uniHair.forEach((hair) => {\n        timeline.fromTo(\n          hair,\n          { y: 0, x: -1 },\n          {\n            y: 1,\n            x: 1,\n            duration: 1.3,\n            transformOrigin: \"50% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        );\n      });\n\n      timeline\n        /* unicorn */\n        .fromTo(\n          uni,\n          { rotateZ: 1 },\n          {\n            rotateZ: \"random(2, 6)\",\n            duration: \"random(1, 2)\",\n            ...loopSineInOut,\n            repeatRefresh: true,\n          },\n          0\n        )\n        /* umbrella */\n        .fromTo(\n          umbrella,\n          { rotateZ: -2, x: 1 },\n          {\n            rotateZ: 2,\n            x: 1,\n            duration: 1,\n            transformOrigin: \"50% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        )\n\n        /* umbrella stick */\n        .fromTo(\n          umbrellaStick,\n          { rotateZ: -2, x: -2.5 },\n          {\n            rotateZ: 2,\n            x: -2.5,\n            duration: 1,\n            transformOrigin: \"50% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        )\n\n        /* hand  */\n        .fromTo(\n          hand,\n          { rotateZ: 2 },\n          {\n            rotateZ: -2,\n            duration: 1,\n            transformOrigin: \"100% 100%\",\n            ...loopSineInOut,\n          },\n          0\n        )\n\n        /* eye  */\n        .fromTo(\n          uniEye,\n          { scaleY: 1 },\n          {\n            scaleY: 1,\n            transformOrigin: \"50% 50%\",\n            repeat: -1,\n            duration: 2,\n            repeatDelay: 0.2,\n          },\n          0\n        )\n\n        .fromTo(\n          uniEye,\n          { scaleY: 0.1 },\n          {\n            scaleY: 1,\n            transformOrigin: \"50% 50%\",\n            repeat: -1,\n            delay: 2,\n            duration: 0.2,\n            repeatDelay: 2,\n          },\n          1\n        );\n    },\n\n    moveUnicorn(element) {\n      let pxPerSecond = 50;\n      let newPos = {\n        x: gsap.utils.random(-window.innerWidth, window.innerWidth * 2),\n        y: gsap.utils.random(-window.innerHeight, window.innerHeight * 2),\n      };\n\n      let curPos = {\n        x: gsap.getProperty(element, \"x\"),\n        y: gsap.getProperty(element, \"y\"),\n      };\n\n      let deltaX = curPos.x - newPos.x;\n      let deltaY = curPos.y - newPos.y;\n      let distance = Math.hypot(deltaX, deltaY);\n      let duration = distance / pxPerSecond;\n\n      gsap.to(element, {\n        x: newPos.x,\n        y: newPos.y,\n        duration: duration,\n        ease: \"none\",\n        onComplete: this.moveUnicorn,\n        onCompleteParams: [element],\n      });\n\n      // TO DO: when change component\n      curPos.x > newPos.x\n        ? gsap.to(this.unicorn, { scaleX: 1, x: 0, duration: 0 })\n        : gsap.to(this.unicorn, { scaleX: -1, x: -50, duration: 0 });\n      //   ? gsap.to(element, { scaleX: 1, duration: 0 })\n      //   : gsap.to(element, { scaleX: -1, duration: 0 });\n    },\n\n    doubleTapUnicorn(element) {\n      let lastClick = 0;\n      element.addEventListener(\n        \"touchstart\",\n        () => {\n          let date = new Date();\n          let time = date.getTime();\n\n          const time_between_taps = 200;\n          if (time - lastClick < time_between_taps) {\n            this.openGame();\n          }\n          lastClick = time;\n        },\n        { passive: true }\n      );\n    },\n\n    doubleClickUnicorn(element) {\n      element.addEventListener(\"dblclick\", () => {\n        this.openGame();\n      });\n    },\n\n    openGame() {\n      this.setGame = true;\n      this.$emit(\"openGame\");\n      this.showInfoBubble = true;\n      setTimeout(() => {\n        this.showInfoBubble = false;\n      }, 2300);\n    },\n  },\n\n  mounted() {\n    this.unicorn = this.$refs.flyUnicornSvg.$refs.unicorn;\n    this.unicornContainer = this.$refs.unicornContainer;\n    this.unicornAnimation();\n\n    // TO DO: when change component: change to unicorn\n    this.moveUnicorn(this.unicornContainer);\n    this.doubleTapUnicorn(this.unicornContainer);\n    this.doubleClickUnicorn(this.unicornContainer);\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#unicorn {\n  @include size(14vh, auto);\n\n  @media screen and (min-width: $screen-desktop) {\n    @include size(18vh, auto);\n  }\n}\n\n#unicornContainer {\n  @include size(15vh, auto);\n  @include relative(30%, null, null, 10%);\n  z-index: 2000;\n  cursor: pointer;\n\n  @media screen and (min-width: $screen-desktop) {\n    @include size(10vh, auto);\n  }\n}\n\n#infoBubble {\n  @include absolute(9vh, null, null, 6vh);\n  @include size(15vh);\n\n  @media screen and (min-width: $screen-tablet) {\n    @include absolute(10vh, null, null, 6vh);\n    @include size(14vh);\n  }\n\n  @media screen and (min-width: $screen-desktop) {\n    @include absolute(11vh, null, null, 7vh);\n    @include size(16vh);\n  }\n}\n\n.fade-leave-active {\n  transition: opacity 0.5s;\n}\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}