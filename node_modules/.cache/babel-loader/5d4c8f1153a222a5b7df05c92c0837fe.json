{"ast":null,"code":"import AstroWorkSvg from './AstroWorkSvg.vue';\nimport { basicLoop, loopBounce, loopSineInOut, loopBackInOut } from '@/constants';\nimport { setAnimation } from '../switchAnimation';\nimport { isProxy, toRaw } from 'vue';\nexport default {\n  name: \"AstroWork\",\n  components: {\n    AstroWorkSvg\n  },\n  mixins: [setAnimation],\n  props: {\n    isPlaying: Boolean\n  },\n\n  data() {\n    return {\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      astroWidth: null,\n      astroHeight: null\n    };\n  },\n\n  methods: {\n    init() {\n      const astro = document.querySelector('#astroWork');\n      const stars = document.querySelectorAll('#astroWork .star');\n      const hand = document.querySelector('#astroWork #hand');\n      const head = document.querySelector('#astroWork #head');\n      const light = document.querySelector('#astroWork #light');\n      this.astroWidth = astro.getBoundingClientRect().width;\n      this.astroHeight = astro.getBoundingClientRect().height;\n      let timeline;\n\n      if (isProxy(this.timeline)) {\n        timeline = toRaw(this.timeline);\n      }\n      /* stars */\n\n\n      stars.forEach(star => {\n        timeline.fromTo(star, {\n          rotate: -360\n        }, {\n          rotate: 360,\n          transformOrigin: \"50%, 50%\",\n          duration: 5,\n          ...loopSineInOut\n        }, 0).fromTo(star, {\n          scale: 1.2\n        }, {\n          scale: .6,\n          duration: 3,\n          ...basicLoop\n        }, 0);\n      });\n      timeline\n      /* hand  */\n      .fromTo(hand, {\n        rotateZ: 0,\n        y: 2\n      }, {\n        rotateZ: 12,\n        y: -2,\n        duration: \"random(1, 1.8)\",\n        transformOrigin: '50% 50%',\n        ...loopSineInOut,\n        repeatRefresh: true\n      }, 0)\n      /* head  */\n      .fromTo(head, {\n        rotateZ: 0\n      }, {\n        rotateZ: 10,\n        duration: 3,\n        transformOrigin: '30% 50%',\n        ...loopSineInOut\n      }, 0)\n      /* light  */\n      .fromTo(light, {\n        opacity: 0.1\n      }, {\n        opacity: \"random(0.2, 0.4)\",\n        duration: \"random(3, 6)\",\n        ...loopBounce,\n        repeatRefresh: true\n      }, 0);\n\n      const astroMove = (windowWidth, elementWidth, windowHeight, elementHeight) => {\n        timeline.fromTo(astro, {\n          x: 30,\n          y: 45,\n          rotate: -0\n        }, {\n          x: `random(${-windowWidth + elementWidth}, 50)`,\n          y: `random(${-windowHeight + elementHeight}, 60)`,\n          rotate: \"random([-360, -180, -30, 30, 180, 360])\",\n          duration: 13,\n          ...loopBackInOut,\n          repeatRefresh: true\n        }, 0);\n      };\n\n      astroMove(this.windowWidth, this.astroWidth, this.windowHeight, this.astroHeight);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAKA,OAAOA,YAAP,MAAyB,oBAAzB;AACA,SAAQC,SAAR,EAAmBC,UAAnB,EAA+BC,aAA/B,EAA8CC,aAA9C,QAAkE,aAAlE;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,KAA/B;AAGA,eAAgB;EACfC,IAAI,EAAE,WADS;EAEfC,UAAU,EAAE;IAACT;EAAD,CAFG;EAGfU,MAAM,EAAE,CAACL,YAAD,CAHO;EAIfM,KAAK,EAAE;IACNC,SAAS,EAAEC;EADL,CAJQ;;EAOfC,IAAI,GAAG;IACN,OAAO;MACNC,WAAW,EAAEC,MAAM,CAACC,UADd;MAENC,YAAY,EAAEF,MAAM,CAACG,WAFf;MAGNC,UAAU,EAAE,IAHN;MAINC,WAAW,EAAE;IAJP,CAAP;EAMA,CAdc;;EAefC,OAAO,EAAE;IACRC,IAAI,GAAG;MACN,MAAMC,KAAI,GAAIC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,CAAd;MACS,MAAMC,KAAI,GAAIF,QAAQ,CAACG,gBAAT,CAA0B,kBAA1B,CAAd;MACT,MAAMC,IAAG,GAAIJ,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAb;MACA,MAAMI,IAAG,GAAIL,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAb;MACA,MAAMK,KAAI,GAAIN,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,CAAd;MACA,KAAKN,UAAL,GAAkBI,KAAK,CAACQ,qBAAN,GAA8BC,KAAhD;MACA,KAAKZ,WAAL,GAAkBG,KAAK,CAACQ,qBAAN,GAA8BE,MAAhD;MAEA,IAAIC,QAAJ;;MACA,IAAI7B,OAAO,CAAC,KAAK6B,QAAN,CAAX,EAA2B;QAC1BA,QAAO,GAAI5B,KAAK,CAAC,KAAK4B,QAAN,CAAhB;MACD;MAEA;;;MACSR,KAAK,CAACS,OAAN,CAAeC,IAAD,IAAU;QAChCF,QAAO,CACNG,MADD,CACQD,IADR,EACe;UAACE,MAAM,EAAE,CAAC;QAAV,CADf,EACgC;UAC/BA,MAAM,EAAE,GADuB;UAEhBC,eAAe,EAAE,UAFD;UAG/BC,QAAQ,EAAE,CAHqB;UAI/B,GAAGtC;QAJ4B,CADhC,EAME,CANF,EAOamC,MAPb,CAOoBD,IAPpB,EAO0B;UAAEK,KAAK,EAAE;QAAT,CAP1B,EAO0C;UAC1BA,KAAK,EAAE,EADmB;UAE1BD,QAAQ,EAAE,CAFgB;UAGzC,GAAGxC;QAHsC,CAP1C,EAWc,CAXd;MAaA,CAdQ;MAgBTkC;MACA;MADO,CAENG,MAFD,CAEQT,IAFR,EAEc;QAACc,OAAO,EAAE,CAAV;QAAaC,CAAC,EAAE;MAAhB,CAFd,EAEkC;QACjCD,OAAO,EAAE,EADwB;QAEjCC,CAAC,EAAE,CAAC,CAF6B;QAGjCH,QAAQ,EAAE,gBAHuB;QAIjCD,eAAe,EAAE,SAJgB;QAKjC,GAAGrC,aAL8B;QAMjC0C,aAAa,EAAE;MANkB,CAFlC,EASE,CATF;MAUA;MAVA,CAWCP,MAXD,CAWQR,IAXR,EAWc;QAACa,OAAO,EAAE;MAAV,CAXd,EAW2B;QAC1BA,OAAO,EAAE,EADiB;QAE1BF,QAAQ,EAAE,CAFgB;QAG1BD,eAAe,EAAE,SAHS;QAI1B,GAAGrC;MAJuB,CAX3B,EAgBE,CAhBF;MAiBA;MAjBA,CAkBCmC,MAlBD,CAkBQP,KAlBR,EAkBe;QAACe,OAAO,EAAE;MAAV,CAlBf,EAkB+B;QAC9BA,OAAO,EAAE,kBADqB;QAE9BL,QAAQ,EAAE,cAFoB;QAG9B,GAAGvC,UAH2B;QAI9B2C,aAAa,EAAE;MAJe,CAlB/B,EAuBE,CAvBF;;MAyBA,MAAME,SAAQ,GAAI,CAAChC,WAAD,EAAciC,YAAd,EAA4B9B,YAA5B,EAA0C+B,aAA1C,KAA4D;QAC7Ed,QAAO,CACLG,MADF,CACSd,KADT,EACgB;UAAC0B,CAAC,EAAE,EAAJ;UAAQN,CAAC,EAAE,EAAX;UAAeL,MAAM,EAAE,CAAC;QAAxB,CADhB,EAC4C;UAC3CW,CAAC,EAAG,UAAS,CAACnC,WAAD,GAAeiC,YAAa,OADE;UAE3CJ,CAAC,EAAG,UAAS,CAAC1B,YAAD,GAAgB+B,aAAc,OAFA;UAG3CV,MAAM,EAAE,yCAHmC;UAI3CE,QAAQ,EAAE,EAJiC;UAK3C,GAAGrC,aALwC;UAM3CyC,aAAa,EAAE;QAN4B,CAD5C,EAQG,CARH;MASD,CAVA;;MAWAE,SAAS,CAAC,KAAKhC,WAAN,EAAmB,KAAKK,UAAxB,EAAoC,KAAKF,YAAzC,EAAuD,KAAKG,WAA5D,CAAT;IACD;;EArEQ;AAfM,CAAhB","names":["AstroWorkSvg","basicLoop","loopBounce","loopSineInOut","loopBackInOut","setAnimation","isProxy","toRaw","name","components","mixins","props","isPlaying","Boolean","data","windowWidth","window","innerWidth","windowHeight","innerHeight","astroWidth","astroHeight","methods","init","astro","document","querySelector","stars","querySelectorAll","hand","head","light","getBoundingClientRect","width","height","timeline","forEach","star","fromTo","rotate","transformOrigin","duration","scale","rotateZ","y","repeatRefresh","opacity","astroMove","elementWidth","elementHeight","x"],"sourceRoot":"","sources":["/home/runner/work/portfolio/portfolio/src/components/characters/work/AstroWork.vue"],"sourcesContent":["<template>\n\t<AstroWorkSvg/>\n</template>\n\n<script>\nimport AstroWorkSvg from './AstroWorkSvg.vue';\nimport {basicLoop, loopBounce, loopSineInOut, loopBackInOut} from '@/constants'\nimport { setAnimation } from '../switchAnimation';\nimport { isProxy, toRaw } from 'vue';\n\n\nexport default ({\n\tname: \"AstroWork\",\n\tcomponents: {AstroWorkSvg},\n\tmixins: [setAnimation],\n\tprops: {\n\t\tisPlaying: Boolean,\n\t},\n\tdata() {\n\t\treturn { \n\t\t\twindowWidth: window.innerWidth,\n\t\t\twindowHeight: window.innerHeight,\n\t\t\tastroWidth: null,\n\t\t\tastroHeight: null,\n\t\t}\n\t},\n\tmethods: {\n\t\tinit() {\n\t\t\tconst astro = document.querySelector('#astroWork');\n            const stars = document.querySelectorAll('#astroWork .star');\n\t\t\tconst hand = document.querySelector('#astroWork #hand');\n\t\t\tconst head = document.querySelector('#astroWork #head');\n\t\t\tconst light = document.querySelector('#astroWork #light');\n\t\t\tthis.astroWidth = astro.getBoundingClientRect().width;\n\t\t\tthis.astroHeight= astro.getBoundingClientRect().height;\n\n\t\t\tlet timeline;\n\t\t\tif (isProxy(this.timeline)){\n\t\t\t\ttimeline = toRaw(this.timeline);\n\t\t\t}\n\t\t\t\t\n\t\t\t/* stars */\t\n            stars.forEach((star) => {\n\t\t\t\ttimeline\n\t\t\t\t.fromTo(star,  {rotate: -360 }, {\n\t\t\t\t\trotate: 360,\n                    transformOrigin: \"50%, 50%\",\n\t\t\t\t\tduration: 5,\n\t\t\t\t\t...loopSineInOut\n\t\t\t\t},0)\n                .fromTo(star, { scale: 1.2 }, {\n                    scale: .6,\n                    duration: 3,\n\t\t\t\t\t...basicLoop\n                },0)\n      \n\t\t\t});\n\n\t\t\ttimeline\n\t\t\t/* hand  */\t\n\t\t\t.fromTo(hand, {rotateZ: 0, y: 2}, {\n\t\t\t\trotateZ: 12,\n\t\t\t\ty: -2,\n\t\t\t\tduration: \"random(1, 1.8)\",\n\t\t\t\ttransformOrigin: '50% 50%',\n\t\t\t\t...loopSineInOut,\n\t\t\t\trepeatRefresh: true\n\t\t\t},0)\n\t\t\t/* head  */\t\n\t\t\t.fromTo(head, {rotateZ: 0},{\n\t\t\t\trotateZ: 10,\n\t\t\t\tduration: 3,\n\t\t\t\ttransformOrigin: '30% 50%',\n\t\t\t\t...loopSineInOut\n\t\t\t},0)\n\t\t\t/* light  */\t\n\t\t\t.fromTo(light, {opacity: 0.1}, {\n\t\t\t\topacity: \"random(0.2, 0.4)\",\n\t\t\t\tduration: \"random(3, 6)\",\n\t\t\t\t...loopBounce,\n\t\t\t\trepeatRefresh: true\n\t\t\t},0)\n\n\t\t\tconst astroMove = (windowWidth, elementWidth, windowHeight, elementHeight) => {\n\t\t\t\ttimeline\n\t\t\t\t\t.fromTo(astro, {x: 30, y: 45, rotate: -0}, {\n\t\t\t\t\tx: `random(${-windowWidth + elementWidth}, 50)`,\n\t\t\t\t\ty: `random(${-windowHeight + elementHeight}, 60)`,\n\t\t\t\t\trotate: \"random([-360, -180, -30, 30, 180, 360])\",\n\t\t\t\t\tduration: 13,\n\t\t\t\t\t...loopBackInOut,\n\t\t\t\t\trepeatRefresh: true\n\t\t\t\t}, 0)\n\t\t\t}\n\t\t\tastroMove(this.windowWidth, this.astroWidth, this.windowHeight, this.astroHeight)\n\t\t}\n\t}\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}