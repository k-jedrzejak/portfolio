{"ast":null,"code":"import FlyUnicornSvg from \"./FlyUnicornSvg.vue\";\nimport gsap from \"gsap\";\nimport { loopSineInOut } from \"@/constants\";\nimport InfoBubble from \"@/components/InfoBubble.vue\";\nexport default {\n  name: \"FlyUnicorn\",\n  props: [\"game\"],\n  components: {\n    FlyUnicornSvg,\n    InfoBubble\n  },\n\n  data() {\n    return {\n      unicorn: null,\n      unicornContainer: null,\n      infoBubble: null,\n      showInfoBubble: false\n    };\n  },\n\n  methods: {\n    unicornAnimation() {\n      const uni = this.unicorn;\n      const uniFringe = uni.querySelectorAll(\".hair1\");\n      const uniEye = uni.querySelector(\".eye\");\n      const uniHair = uni.querySelectorAll(\".hair2\");\n      const umbrella = uni.querySelector(\".umbrella\");\n      const umbrellaStick = uni.querySelectorAll(\".umbrella-stick\");\n      const hand = uni.querySelectorAll(\".hand\");\n      const timeline = gsap.timeline();\n      uniFringe.forEach(hair => {\n        timeline.fromTo(hair, {\n          rotateZ: 0\n        }, {\n          rotateZ: 5,\n          duration: 1.3,\n          transformOrigin: \"100% 50%\",\n          ...loopSineInOut\n        }, 0);\n      });\n      uniHair.forEach(hair => {\n        timeline.fromTo(hair, {\n          y: 0,\n          x: -1\n        }, {\n          y: 1,\n          x: 1,\n          duration: 1.3,\n          transformOrigin: \"50% 50%\",\n          ...loopSineInOut\n        }, 0);\n      });\n      timeline\n      /* unicorn */\n      .fromTo(uni, {\n        rotateZ: 1\n      }, {\n        rotateZ: \"random(2, 6)\",\n        duration: \"random(1, 2)\",\n        ...loopSineInOut,\n        repeatRefresh: true\n      }, 0)\n      /* umbrella */\n      .fromTo(umbrella, {\n        rotateZ: -2,\n        x: 1\n      }, {\n        rotateZ: 2,\n        x: 1,\n        duration: 1,\n        transformOrigin: \"50% 50%\",\n        ...loopSineInOut\n      }, 0)\n      /* umbrella stick */\n      .fromTo(umbrellaStick, {\n        rotateZ: -2,\n        x: -2.5\n      }, {\n        rotateZ: 2,\n        x: -2.5,\n        duration: 1,\n        transformOrigin: \"50% 50%\",\n        ...loopSineInOut\n      }, 0)\n      /* hand  */\n      .fromTo(hand, {\n        rotateZ: 2\n      }, {\n        rotateZ: -2,\n        duration: 1,\n        transformOrigin: \"100% 100%\",\n        ...loopSineInOut\n      }, 0)\n      /* eye  */\n      .fromTo(uniEye, {\n        scaleY: 1\n      }, {\n        scaleY: 1,\n        transformOrigin: \"50% 50%\",\n        repeat: -1,\n        duration: 2,\n        repeatDelay: 0.2\n      }, 0).fromTo(uniEye, {\n        scaleY: 0.1\n      }, {\n        scaleY: 1,\n        transformOrigin: \"50% 50%\",\n        repeat: -1,\n        delay: 2,\n        duration: 0.2,\n        repeatDelay: 2\n      }, 1);\n    },\n\n    moveUnicorn(element) {\n      let pxPerSecond = 50;\n      let newPos = {\n        x: gsap.utils.random(-window.innerWidth, window.innerWidth * 2),\n        y: gsap.utils.random(-window.innerHeight, window.innerHeight * 2)\n      };\n      let curPos = {\n        x: gsap.getProperty(element, \"x\"),\n        y: gsap.getProperty(element, \"y\")\n      };\n      let deltaX = curPos.x - newPos.x;\n      let deltaY = curPos.y - newPos.y;\n      let distance = Math.hypot(deltaX, deltaY);\n      let duration = distance / pxPerSecond;\n      gsap.to(element, {\n        x: newPos.x,\n        y: newPos.y,\n        duration: duration,\n        ease: \"none\",\n        onComplete: this.moveUnicorn,\n        onCompleteParams: [element]\n      }); // TO DO: when change component\n\n      curPos.x > newPos.x ? gsap.to(this.unicorn, {\n        scaleX: 1,\n        x: 0,\n        duration: 0\n      }) : gsap.to(this.unicorn, {\n        scaleX: -1,\n        x: -50,\n        duration: 0\n      }); //   ? gsap.to(element, { scaleX: 1, duration: 0 })\n      //   : gsap.to(element, { scaleX: -1, duration: 0 });\n    },\n\n    doubleTapUnicorn(element) {\n      let lastClick = 0;\n      element.addEventListener(\"touchstart\", () => {\n        let date = new Date();\n        let time = date.getTime();\n        const time_between_taps = 200;\n\n        if (time - lastClick < time_between_taps) {\n          this.openGame();\n        }\n\n        lastClick = time;\n      }, {\n        passive: true\n      });\n    },\n\n    doubleClickUnicorn(element) {\n      element.addEventListener(\"dblclick\", () => {\n        this.openGame();\n      });\n    },\n\n    openGame() {\n      this.setGame = true;\n      this.$emit(\"openGame\");\n      this.showInfoBubble = true;\n      setTimeout(() => {\n        this.showInfoBubble = false;\n      }, 2300);\n    }\n\n  },\n\n  mounted() {\n    this.unicorn = this.$refs.flyUnicornSvg.$refs.unicorn;\n    this.unicornContainer = this.$refs.unicornContainer;\n    this.unicornAnimation(); // TO DO: when change component: change to unicorn\n\n    this.moveUnicorn(this.unicornContainer);\n    this.doubleTapUnicorn(this.unicornContainer);\n    this.doubleClickUnicorn(this.unicornContainer);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["FlyUnicornSvg","gsap","loopSineInOut","InfoBubble","name","props","components","data","unicorn","unicornContainer","infoBubble","showInfoBubble","methods","unicornAnimation","uni","uniFringe","querySelectorAll","uniEye","querySelector","uniHair","umbrella","umbrellaStick","hand","timeline","forEach","hair","fromTo","rotateZ","duration","transformOrigin","y","x","repeatRefresh","scaleY","repeat","repeatDelay","delay","moveUnicorn","element","pxPerSecond","newPos","utils","random","window","innerWidth","innerHeight","curPos","getProperty","deltaX","deltaY","distance","Math","hypot","to","ease","onComplete","onCompleteParams","scaleX","doubleTapUnicorn","lastClick","addEventListener","date","Date","time","getTime","time_between_taps","openGame","passive","doubleClickUnicorn","setGame","$emit","setTimeout","mounted","$refs","flyUnicornSvg"],"sourceRoot":"","sources":["/home/runner/work/portfolio/portfolio/src/components/characters/unicorn/FlyUnicorn.vue"],"sourcesContent":["<template>\n  <!-- TO DO: when change component: remove unicornCOntainer and InfoBubble when component change -->\n  <div ref=\"unicornContainer\" id=\"unicornContainer\">\n    <transition name=\"fade\">\n      <InfoBubble v-if=\"showInfoBubble\" />\n    </transition>\n    <FlyUnicornSvg ref=\"flyUnicornSvg\" @change=\"openGame\" />\n  </div>\n</template>\n\n<script>\nimport FlyUnicornSvg from \"./FlyUnicornSvg.vue\";\nimport gsap from \"gsap\";\nimport { loopSineInOut } from \"@/constants\";\nimport InfoBubble from \"@/components/InfoBubble.vue\";\n\nexport default {\n  name: \"FlyUnicorn\",\n  props: [\"game\"],\n  components: { FlyUnicornSvg, InfoBubble },\n  data() {\n    return {\n      unicorn: null,\n      unicornContainer: null,\n      infoBubble: null,\n      showInfoBubble: false,\n    };\n  },\n  methods: {\n    unicornAnimation() {\n      const uni = this.unicorn;\n      const uniFringe = uni.querySelectorAll(\".hair1\");\n      const uniEye = uni.querySelector(\".eye\");\n      const uniHair = uni.querySelectorAll(\".hair2\");\n      const umbrella = uni.querySelector(\".umbrella\");\n      const umbrellaStick = uni.querySelectorAll(\".umbrella-stick\");\n      const hand = uni.querySelectorAll(\".hand\");\n      const timeline = gsap.timeline();\n\n      uniFringe.forEach((hair) => {\n        timeline.fromTo(\n          hair,\n          { rotateZ: 0 },\n          {\n            rotateZ: 5,\n            duration: 1.3,\n            transformOrigin: \"100% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        );\n      });\n\n      uniHair.forEach((hair) => {\n        timeline.fromTo(\n          hair,\n          { y: 0, x: -1 },\n          {\n            y: 1,\n            x: 1,\n            duration: 1.3,\n            transformOrigin: \"50% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        );\n      });\n\n      timeline\n        /* unicorn */\n        .fromTo(\n          uni,\n          { rotateZ: 1 },\n          {\n            rotateZ: \"random(2, 6)\",\n            duration: \"random(1, 2)\",\n            ...loopSineInOut,\n            repeatRefresh: true,\n          },\n          0\n        )\n        /* umbrella */\n        .fromTo(\n          umbrella,\n          { rotateZ: -2, x: 1 },\n          {\n            rotateZ: 2,\n            x: 1,\n            duration: 1,\n            transformOrigin: \"50% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        )\n\n        /* umbrella stick */\n        .fromTo(\n          umbrellaStick,\n          { rotateZ: -2, x: -2.5 },\n          {\n            rotateZ: 2,\n            x: -2.5,\n            duration: 1,\n            transformOrigin: \"50% 50%\",\n            ...loopSineInOut,\n          },\n          0\n        )\n\n        /* hand  */\n        .fromTo(\n          hand,\n          { rotateZ: 2 },\n          {\n            rotateZ: -2,\n            duration: 1,\n            transformOrigin: \"100% 100%\",\n            ...loopSineInOut,\n          },\n          0\n        )\n\n        /* eye  */\n        .fromTo(\n          uniEye,\n          { scaleY: 1 },\n          {\n            scaleY: 1,\n            transformOrigin: \"50% 50%\",\n            repeat: -1,\n            duration: 2,\n            repeatDelay: 0.2,\n          },\n          0\n        )\n\n        .fromTo(\n          uniEye,\n          { scaleY: 0.1 },\n          {\n            scaleY: 1,\n            transformOrigin: \"50% 50%\",\n            repeat: -1,\n            delay: 2,\n            duration: 0.2,\n            repeatDelay: 2,\n          },\n          1\n        );\n    },\n\n    moveUnicorn(element) {\n      let pxPerSecond = 50;\n      let newPos = {\n        x: gsap.utils.random(-window.innerWidth, window.innerWidth * 2),\n        y: gsap.utils.random(-window.innerHeight, window.innerHeight * 2),\n      };\n\n      let curPos = {\n        x: gsap.getProperty(element, \"x\"),\n        y: gsap.getProperty(element, \"y\"),\n      };\n\n      let deltaX = curPos.x - newPos.x;\n      let deltaY = curPos.y - newPos.y;\n      let distance = Math.hypot(deltaX, deltaY);\n      let duration = distance / pxPerSecond;\n\n      gsap.to(element, {\n        x: newPos.x,\n        y: newPos.y,\n        duration: duration,\n        ease: \"none\",\n        onComplete: this.moveUnicorn,\n        onCompleteParams: [element],\n      });\n\n      // TO DO: when change component\n      curPos.x > newPos.x\n        ? gsap.to(this.unicorn, { scaleX: 1, x: 0, duration: 0 })\n        : gsap.to(this.unicorn, { scaleX: -1, x: -50, duration: 0 });\n      //   ? gsap.to(element, { scaleX: 1, duration: 0 })\n      //   : gsap.to(element, { scaleX: -1, duration: 0 });\n    },\n\n    doubleTapUnicorn(element) {\n      let lastClick = 0;\n      element.addEventListener(\n        \"touchstart\",\n        () => {\n          let date = new Date();\n          let time = date.getTime();\n\n          const time_between_taps = 200;\n          if (time - lastClick < time_between_taps) {\n            this.openGame();\n          }\n          lastClick = time;\n        },\n        { passive: true }\n      );\n    },\n\n    doubleClickUnicorn(element) {\n      element.addEventListener(\"dblclick\", () => {\n        this.openGame();\n      });\n    },\n\n    openGame() {\n      this.setGame = true;\n      this.$emit(\"openGame\");\n      this.showInfoBubble = true;\n      setTimeout(() => {\n        this.showInfoBubble = false;\n      }, 2300);\n    },\n  },\n\n  mounted() {\n    this.unicorn = this.$refs.flyUnicornSvg.$refs.unicorn;\n    this.unicornContainer = this.$refs.unicornContainer;\n    this.unicornAnimation();\n\n    // TO DO: when change component: change to unicorn\n    this.moveUnicorn(this.unicornContainer);\n    this.doubleTapUnicorn(this.unicornContainer);\n    this.doubleClickUnicorn(this.unicornContainer);\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#unicorn {\n  @include size(14vh, auto);\n\n  @media screen and (min-width: $screen-desktop) {\n    @include size(18vh, auto);\n  }\n}\n\n#unicornContainer {\n  @include size(15vh, auto);\n  @include relative(30%, null, null, 10%);\n  z-index: 2000;\n  cursor: pointer;\n\n  @media screen and (min-width: $screen-desktop) {\n    @include size(10vh, auto);\n  }\n}\n\n#infoBubble {\n  @include absolute(9vh, null, null, 6vh);\n  @include size(15vh);\n\n  @media screen and (min-width: $screen-tablet) {\n    @include absolute(10vh, null, null, 6vh);\n    @include size(14vh);\n  }\n\n  @media screen and (min-width: $screen-desktop) {\n    @include absolute(11vh, null, null, 7vh);\n    @include size(16vh);\n  }\n}\n\n.fade-leave-active {\n  transition: opacity 0.5s;\n}\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}